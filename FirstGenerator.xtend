/*
 * generated by Xtext 2.20.0
 */
package org.xtext.project.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.project.generator.Credential
import org.xtext.project.first.Agent
import org.eclipse.emf.common.util.EList
import org.xtext.project.first.IntentSettings
import org.xtext.project.first.Intent
import org.xtext.project.first.AgentSettings
import org.xtext.project.first.AgentInside
import org.xtext.project.first.VoiceAssistant

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FirstGenerator extends AbstractGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for(agent: resource.allContents.toIterable.filter(Agent)) {
				val cred = new Credential
				cred.setCredentialJson(fsa, "assistant/" + agent.name + "/dial-py.service.json")
				fsa.generateFile("assistant/" + agent.name + "/setAgent.py", agent.compile)
		}
	}
	
	def CharSequence defaultNeed(String place) {
		'''
			import os
			import dialogflow_v2 as dialogflow
						
			os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = '«  if(place === 'agent') '' else '../'  »dial-py.service.json'
		'''
	}
	
	def AgentSettings getParameters(AgentInside agentInside) {
		agentInside.settings
	}
	
	def EList<Intent> getAllIntents(Agent agent) {
		agent.agentInside.intents
	}
	
	def String getProjectPath(Agent agent) {
		agent.agentInside.settings.parent
	}
	
	def CharSequence compile(Agent agent) {
		'''
			«  defaultNeed('agent')  »
			
			client = dialogflow.AgentsClient()
			
			agent = dialogflow.types.Agent(
				parent='projects/«  agent.agentInside.parameters.parent  »',
				display_name='«  agent.name  »',
				default_language_code='«  agent.agentInside.getParameters.languageCode  »',
				time_zone='«  agent.agentInside.getParameters.timeZone  »'
			)
			
			response = client.set_agent(agent=agent)
			
			«FOR i : agent.getAllIntents »
				«  i.compile(agent.getProjectPath)  »
			«ENDFOR»
			
		'''
	}
	
	def CharSequence compile(Intent intent, String project_path) {
		'''
		client = dialogflow.IntentsClient()
		parent = client.project_agent_path('«  project_path  »')
		
		training_phrases_parts = «  intent.settings.trainings.convertToStringList  »
		message_texts = «  intent.settings.messages.convertToStringList  »
		
		parameters = «  intent.settings.getAlma  »
		
		training_phrases = []
		for training_phrases_part in training_phrases_parts:
			part = dialogflow.types.Intent.TrainingPhrase.Part(text=training_phrases_part)
			training_phrase = dialogflow.types.Intent.TrainingPhrase(parts=[part])
			training_phrases.append(training_phrase)
			
		text = dialogflow.types.Intent.Message.Text(text=message_texts)
		message = dialogflow.types.Intent.Message(text=text)
		
		intent = dialogflow.types.Intent(
		        display_name='«  intent.name  »',
		        training_phrases=training_phrases,
		        messages=[message])
		        
		response = client.create_intent(parent, intent)
		'''
	}
	
	def convertToStringList(EList<String> list) {
		list.map[li | "'" + li + "'"]
	}
	
	def getAlma(IntentSettings intentSettings) {
		InputOutput.println("intentSettings " + intentSettings.getParameters)
		for(p: intentSettings.getParameters) {
			InputOutput.println(p)
			InputOutput.println(p.name)
		}
	}
}
